<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="wiki.xsl"?>
<xsd:schema
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:html="http://www.w3.org/1999/xhtml">
  <xsd:annotation>
    <xsd:documentation>
      Example:
      <pre>
      &lt;?xml version=&quot;1.0&quot;?&gt;
      &lt;module name=&quot;modulename&quot; include=&quot;vector&quot;&gt;
        &lt;doc&gt;module doc string&lt;/doc&gt;

        &lt;class name=&quot;DVector&quot; type=&quot;std::vector&amp;lt;double&amp;gt;&quot;&gt;
          &lt;doc&gt;class doc string&lt;/doc&gt;
          &lt;init/&gt;
          &lt;property name=&quot;size&quot; get=&quot;size&quot; set=&quot;resize&quot;/&gt;
          &lt;def func=&quot;push_back&quot;/&gt;
        &lt;/class&gt;
      &lt;/module&gt;
      </pre>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:simpleType name="ident">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[a-zA-Z_][a-zA-Z0-9_]*"/>
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="retsemantictype">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="default"/>
      <xsd:enumeration value="copy"/>
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="symbol">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>


  <xsd:simpleType name="arglist">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:simpleType name="includelist">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>


  <xsd:element name="module">
    <xsd:complexType>
      <xsd:choice maxOccurs="unbounded" minOccurs="0">
        <xsd:element ref="def"/>
        <xsd:element ref="class"/>
        <xsd:element ref="doc"/>
      </xsd:choice>
      <xsd:attribute name="name" type="ident" use="required"/>
      <xsd:attribute name="include" type="includelist" use="required">
        <xsd:annotation>
          <xsd:documentation>
            A comma seperated list of include files to scan for the types and
            functions to expose.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>


  <xsd:element name="def">
    <xsd:annotation>
      <xsd:documentation>
        Specifies a method when inside &lt;class&gt;, specifies a function when
        inside &lt;module&gt;.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>

      <xsd:all minOccurs="0">
        <xsd:element ref="doc"/>
      </xsd:all>

      <xsd:attribute name="name" type="ident">
        <xsd:annotation>
          <xsd:documentation>
            The name of the function/method as will be seen in python. If not
            specified, the name will taken from the C++ function/method.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

      <xsd:attribute name="func" type="symbol" use="required"/>

      <xsd:attribute name="overload" type="arglist">
        <xsd:annotation>
          <xsd:documentation>
            The list of arguments the C++ function/method takes. This is to
            select a specific function/method when the function/method is
            overloaded. The arguments are seperated by commas just like in the
            function/method. The types can be specified with or without
            typedefs, as long as the underlying types are the same as that of
            the function/method.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

      <xsd:attribute name="return-semantic" type="retsemantictype" default="default">
        <xsd:annotation>
          <xsd:documentation>
            Specifies how a pointer or reference return value is to be handled.
            If the function returns by value, this attribute is meaningless. The
            options are "default" and "copy". "default" is the same as ommitting
            this attribute. "copy" means the value will be dereferenced and
            copied by value.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

    </xsd:complexType>
  </xsd:element>


  <xsd:element name="init">
    <xsd:complexType>
      <xsd:attribute name="overload" type="arglist"/>
    </xsd:complexType>
  </xsd:element>


  <xsd:element name="property">
    <xsd:complexType>
      <xsd:all>
        <xsd:element ref="doc" minOccurs="0"/>
        <xsd:element name="get" minOccurs="0">
          <xsd:complexType>
            <xsd:attribute name="func" type="symbol" use="required"/>
            <xsd:attribute name="return-semantic" type="retsemantictype" default="default"/>
          </xsd:complexType>
        </xsd:element>
        <xsd:element name="set" minOccurs="0">
          <xsd:complexType>
            <xsd:attribute name="func" type="symbol" use="required"/>
            <xsd:attribute name="overload" type="arglist"/>
          </xsd:complexType>
        </xsd:element>
      </xsd:all>

      <xsd:attribute name="name" type="ident" use="required"/>
      <xsd:attribute name="get" type="symbol"/>
      <xsd:attribute name="set" type="symbol"/>
    </xsd:complexType>
  </xsd:element>


  <xsd:element name="member">
    <xsd:annotation>
      <xsd:documentation>
        Expose a member variable as a Python attribute.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>

      <xsd:attribute name="name" type="ident">
        <xsd:annotation>
          <xsd:documentation>
            The name of the member as will be seen in python. If not specified,
            the name will be taken from the C++ member.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

      <xsd:attribute name="cmember" type="symbol" use="required">
        <xsd:annotation>
          <xsd:documentation>
            The member variable of the C++ class to expose.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

    </xsd:complexType>
  </xsd:element>


  <xsd:element name="class">
    <xsd:complexType>
      <xsd:choice maxOccurs="unbounded" minOccurs="0">
        <xsd:element ref="init"/>
        <xsd:element ref="def"/>
        <xsd:element ref="property"/>
        <xsd:element ref="member"/>
        <xsd:element ref="doc"/>
      </xsd:choice>

      <xsd:attribute name="name" type="ident">
        <xsd:annotation>
          <xsd:documentation>
            The name of the class as will be seen in python. If not specified,
            the name will be taken from the C++ class, if the class name is a
            legal Python identifier, otherwise an arbitrary name is chosen.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

      <xsd:attribute name="type" type="symbol" use="required">
        <xsd:annotation>
          <xsd:documentation>
            The C++ class to expose to python. The class may be an instantiation
            of a template, but cannot be the template itself (e.g. you can use
            std::vector&lt;int&gt;, but not std::vector).
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>


  <xsd:element name="doc">
    <xsd:annotation>
      <xsd:documentation>
        A documentation string that will be exposed to Python.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:whiteSpace value="preserve"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
</xsd:schema>